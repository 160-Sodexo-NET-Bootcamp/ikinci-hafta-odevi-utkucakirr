using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Data.DataModel;
using Data.DataModel.DTOs;
using Data.Uow;
using Microsoft.Extensions.Logging;

namespace UtkuCakir_Odev2.Controllers
{
    [Route("api/[controller]s")]
    [ApiController]
    public class VehicleController : ControllerBase
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly ILogger<VehicleController> _logger;

        public VehicleController(ILogger<VehicleController> logger, IUnitOfWork unitOfWork)
        {
            _logger = logger;
            _unitOfWork = unitOfWork;
        }

        //Getting all vehicles from database.
        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var listOfVehicles = await _unitOfWork.VehicleRepository.GetAll();
            if (listOfVehicles is null)
            {
                return Ok("List is empty");
            }
            return Ok(listOfVehicles);
        }

        //Getting the vehicle whose id is equal to the parameter value.
        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(long id)
        {
            var vehicle = await _unitOfWork.VehicleRepository.GetById(id);
            if (vehicle is null)
            {
                return NotFound();
            }

            return Ok(vehicle);
        }

        //Creating a vehicle. For this method, VehicleViewModel is used. By this way, the user don't have to enter id value. This value will be generated by database.
        [HttpPost]
        public async Task<IActionResult> Create([FromBody] VehicleViewModel entity)
        {
            //Converting VehicleViewModel to Vehicle model for adding to the database.
            Vehicle addedEntity = _unitOfWork.VehicleRepository.Convert(entity);
            var response = await _unitOfWork.VehicleRepository.Add(addedEntity);
            _unitOfWork.Complete();
            if (response)
            {
                return Ok("Vehicle added.");
            }
            return Ok("Failed.");
        }

        //Updating a vehicle.
        [HttpPut]
        public async Task<IActionResult> Update([FromBody] Vehicle entity)
        {
            var response = await _unitOfWork.VehicleRepository.Update(entity);
            _unitOfWork.Complete();
            if (response)
            {
                return Ok("Updated.");
            }
            return Ok("Failed.");
        }

        //Deleting a vehicle.
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(long id)
        {
            var response = await _unitOfWork.VehicleRepository.Delete(id);
            _unitOfWork.Complete();
            if (response)
            {
                return Ok("Deleted succesfully.");
            }
            return Ok("Failed.");
        }

        //Getting all containers of the vehicle whose id is entered as parameter.
        [HttpGet("Containers/{id}")]
        public async Task<IActionResult> GetContainers(long id)
        {
            var listOfContainers = await _unitOfWork.ContainerRepository.GetByVehicleId(id);
            _unitOfWork.Complete();
            if (listOfContainers is null)
            {
                return Ok("There is no container for that vehicle.");
            }

            return Ok(listOfContainers);
        }

        //In this method, the containers of the vehicle whose id is entered as parameter, will be divided into n groups.
        [HttpGet("ContainersClustered")]
        public async Task<IActionResult> GetContainerGroups(long id, int n)
        {
            var response = await _unitOfWork.ContainerRepository.GroupByVehicleId(id, n);
            return Ok(response);
        }
    }
}
